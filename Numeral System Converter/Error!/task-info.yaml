type: edu
custom_name: stage6
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello world!");
        }
    }
  learner_created: false
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {
        final String input;
        String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends StageTest<Clue> {

        public ConverterTest() {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("a b\n\n\n", null, true),
                testToAnswer("11\nabc\n\n", null, true),
                testToAnswer("11\n1\ndas\n", null, true),
                testToAnswer("0\n1\ndas\n", null, true),
                testToAnswer("37\n1\ndas\n", null, true),
                testToAnswer("36\n1\n0\n", null, true),
                testToAnswer("36\n1\n37\n", null, true),

                /* Tests without a hint: */
                testToAnswer("c\n\n\n", null, false),
                testToAnswer("12\nbc\n\n", null, false),
                testToAnswer("12\n1\nhf\n", null, false),
                testToAnswer("0\n2\nhf\n", null, false),
                testToAnswer("37\n2\nhf\n", null, false),
                testToAnswer("14\n2\n-1\n", null, false),
                testToAnswer("14\n2\n38\n", null, false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n0.234\n7", "0.14315", true),
                testToAnswer("10\n10.234\n7", "13.14315", true),
                testToAnswer("6\n2\n1", "11", true),
                testToAnswer("35\naf.xy\n17", "148.g88a8", true),
                testToAnswer("10\n11\n2", "1011", true),
                testToAnswer("16\naaaaa.0\n24", "22df2.00000", true),
                testToAnswer("16\n0.cdefb\n24", "0.j78da", true),
                testToAnswer("16\naaaaa.cdefb\n24", "22df2.j78da", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n0.2340\n7", "0.14315", false),
                testToAnswer("10\n10.2340\n7", "13.14315", false),
                testToAnswer("6\n2\n1", "11", false),
                testToAnswer("35\naf.xy0\n17", "148.g88a8", false),
                testToAnswer("10\n12\n2", "1100", false),
                testToAnswer("16\naaaaa.00\n24", "22df2.00000", false),
                testToAnswer("16\n0.cdefb0\n24", "0.j78da", false),
                testToAnswer("16\naaaaa.cdefb0\n24", "22df2.j78da", false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            String answer = lines[lines.length - 1];

            if (clue.answer == null) {
                if (answer.toLowerCase().contains("error")) {
                    return new CheckResult(true);
                } else if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your program doesn't say about an error.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your program doesn't say about an error."
                    );
                }
            }

            answer = answer.replaceAll("[^\\p{Graph}]", "");
            clue.answer = clue.answer.replaceAll("[^\\p{Graph}]", "");

            answer = removeEndZeros(answer);
            clue.answer = removeEndZeros(clue.answer);

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your program gives a wrong answer when there is no error in the input.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your program gives a wrong answer when there is no error in the input."
                    );
                }
            }

            return new CheckResult(true);
        }

        private String removeEndZeros(String number) {
            if (!number.contains(".")) {
                return number;
            }
            while (number.endsWith("0")) {
                number = number.substring(0, number.length() - 1);
            }
            if (number.endsWith(".")) {
                number = number.substring(0, number.length() - 1);
            }
            return number;
        }
    }
  learner_created: false
- name: src/converter/Converter.java
  visible: true
  text: |
    package converter;
    import java.util.Arrays;



    public class Converter {

        public String getInteger(String str) {
            return str.split("\\.")[0];
        }

        public String getFractional(String str) {
            if (str.split("\\.").length == 1) {
                return "";
            } else
            return str.split("\\.")[1];
        }

        public String fromBaseToOut(String str, int sourceBase, int outputBase) {
            return Integer.toString(Integer.parseInt(str, sourceBase), outputBase);
        }

        public String fromIntDecimalToOutputBase(String str, int outputBase) {
            if (outputBase == 1) {
                int[] mass = new int[Integer.parseInt(str)];
                for (int i = 0; i < mass.length; i++) {
                    mass[i] = 1;
                }
                return Arrays.toString(mass).replaceAll("\\[|\\]|,|\\s", "");
            } else {
                return Integer.toString(Integer.parseInt(str), outputBase);
            }

        }

        public double fractionalPartToDecimal(String str, int sourceBase) {
            System.out.println("fractionalPartToDecimal str = " + str);
            if (str.length() == 0) {
                return 0;
            } else {
                double result = 0;
                long base = (long) sourceBase;
                for (int i = 0; i < str.length(); i++) {
                    if (!Character.isDigit(str.charAt(i))) {
                        int n = fromCharToInt(str.charAt(i));
                        result += (double) n / base;
                        base *= sourceBase;
                    //System.out.println("sourceBase = " + base);
                    } else {
                        result += (double) Character.getNumericValue(str.charAt(i)) / sourceBase;
                        base *= base;
                    }
                }
                //System.out.println("result from fractionalPartToDecimal = " + result);
                return result;
            }
        }
        public String fractionalDecPartToNewBase(String str, int outputBase) {
            String s = "0." + str;
            double result = Double.parseDouble(s);
            double base = (double) outputBase;
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < 5; i++) {
                result *= base;
                //System.out.println("result = " + result);
                if ((int) result > 9) {
                    builder.append(fromIntToChar((int) result));
                } else {
                    builder.append((int) result);
                }
                result = result % 1;
            }
            return builder.toString();
        }

        public int fromCharToInt(char c) {
            return (int) c - 87;
        }

        public char fromIntToChar(int i) {
            return (char) (i + 87);
        }

        public String toDecimal(String str, int sourceBase) {
            if (sourceBase == 1) {
                return String.valueOf(str.length());
            } else if (sourceBase != 10) {
                String dec = fromBaseToOut(getInteger(str), sourceBase, 10);

                double frac = fractionalPartToDecimal(getFractional(str), sourceBase);
                //System.out.println("frac = " + frac);
                String fractional = Double.toString(frac);
                return dec + "." + fractional.substring(2);
            } else {
                return str;
            }


        }

        public String fromDecimalToOutputBase(String str, int outputBase) {
           // System.out.println("Исходная строка " + str);
            String intDecPart =  getInteger(str);
           // System.out.println("String intDecPart =  getInteger(str);" + intDecPart);
            String fractional = getFractional(str);
          //  System.out.println("String fractional = getFractional(str);" + fractional);
            String intNewBasePart = fromIntDecimalToOutputBase(intDecPart, outputBase);
          //  System.out.println("String intNewBasePart = fromIntDecimalToOutputBase(intDecPart, outputBase);" + intNewBasePart);
            String fracPart = fractionalDecPartToNewBase(fractional, outputBase);
          //  System.out.println("String fracPart = fractionalDecPartToNewBase(fractional, outputBase);" + fracPart);
            return intNewBasePart + "." + fracPart;
        }

        public String mainMethod(String str, int sourceBase, int outputBase) {
            String dec = toDecimal(str, sourceBase);
            //System.out.println("dec= " + dec);
            return fromDecimalToOutputBase(dec,outputBase);
        }
    }
  learner_created: true
- name: src/converter/Checker.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/219/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/41/stages/219/implement">JetBrains
    Academy</a>
  time: Fri, 21 Aug 2020 08:56:29 UTC
record: -1
